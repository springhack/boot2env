" Vim Config Here
set nu
set ai
set et
set ts=2
set sw=2
set bs=2
set sts=2
set hlsearch
set cursorline
set cursorcolumn
set nocompatible
set encoding=utf-8
syntax on
filetype off


" Vim UI Config
"" These lines setup the environment to show graphics and colors correctly.
""" set Vim-specific sequences for RGB colors
colorscheme monokai_pro
set t_Co=256
let &t_8f = "\<esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<esc>[48;2;%lu;%lu;%lum"
let g:airline_theme = 'angr'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
if ! has('gui_running')
  set ttimeoutlen=10
  augroup FastEscape
    autocmd!
    au InsertEnter * set timeoutlen=0
    au InsertLeave * set timeoutlen=1000
  augroup END
endif
set guifont=Inconsolata\ for\ Powerline:h14
set laststatus=2 " Always display the statusline in all windows
set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline


" Plugin Config Here
"" Ack
let g:ackprg = 'rg --vimgrep --ignore-dot '
let g:ack_ignore = ['node_modules', 'build', 'dist', 'out']
let g:ackprg = g:ackprg . '-g !' . join(g:ack_ignore, ' -g !')
"" othree/html5.vim
let g:html5_rdfa_attributes_complete = 1
let g:html5_aria_attributes_complete = 1
let g:html5_microdata_attributes_complete = 1
let g:html5_event_handler_attributes_complete = 1
"" NERDTree
let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$', '^node_modules$[[dir]]']
let NERDTreeChDirMode=2
"" ALE
let g:ale_enabled = 0
let g:ale_sign_error = '>E'
let g:ale_sign_warning = '>W'
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
      \ 'javascript': ['eslint'],
      \ 'typescript': ['eslint'],
      \ 'javascriptreact': ['eslint'],
      \ 'typescriptreact': ['eslint']
      \}
let g:ale_fixers = {
      \ 'css': ['stylelint'],
      \ 'less': ['stylelint'],
      \ 'javascript': ['eslint'],
      \ 'typescript': ['eslint'],
      \ 'javascriptreact': ['eslint'],
      \ 'typescriptreact': ['eslint'],
      \ 'c': ['clang-format'],
      \ 'cpp': ['clang-format']
      \}
"" CtrlP
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_max_files = 0
let g:ctrlp_max_depth = 99
let g:ctrlp_lazy_update = 1
let g:ctrlp_working_path_mode = 'w'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.DS_Store     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe,*.DS_Store  " Windows
if has('mac')
  let g:ctrlp_user_command = 'mdfind -onlyin %s file'
endif
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn)$',
      \ 'file': '\v\.(exe|so|dll)$',
      \ 'link': 'some_bad_symbolic_links',
      \ }
"" Local vimrc
let g:localvimrc_ask = 0
let g:localvimrc_sandbox = 0
"" Clang-Format
let g:clang_format#auto_format = 0


" Plugin Manager Here
call plug#begin()
  "" Project stuff
  Plug 'embear/vim-localvimrc'
  Plug 'dbakker/vim-projectroot'
  "" Language stuff
  Plug 'moll/vim-node'
  Plug 'kelan/gyp.vim'
  Plug 'keith/swift.vim'
  Plug 'othree/yajs.vim'
  Plug 'othree/html5.vim'
  Plug 'othree/es.next.syntax.vim'
  Plug 'https://github.com/unofficial-mirror/gn', { 'rtp': 'misc/vim' }
  "" IDE stuff
  Plug 'w0rp/ale'
  Plug 'mileszs/ack.vim'
  Plug 'majutsushi/tagbar'
  Plug 'ctrlpvim/ctrlp.vim'
  Plug 'scrooloose/nerdtree'
  Plug 'lambdalisue/gina.vim'
  Plug 'rhysd/vim-clang-format'
  Plug 'Xuyuanp/nerdtree-git-plugin'
  Plug 'neoclide/coc.nvim', { 'branch': 'release' }
  Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
  "" Beauty stuff
  Plug 'vim-airline/vim-airline'
  Plug 'gorodinskiy/vim-coloresque'
  Plug 'mtdl9/vim-log-highlighting'
  Plug 'vim-airline/vim-airline-themes'
call plug#end()
filetype plugin indent on


" AutoCMD Config
autocmd BufNewFile * exec ":call AutoRun(1)"
autocmd BufRead * exec ":call AutoRun(0)"


" User Define Functions And Shortcuts
func! AddTitleClike(new_file)
  let f_line = getline(1)
  "" Detect shebang
  if f_line[0:2] == "#!"
    return
  endif
  "" C-like language
  let comment_prefix = "/*"
  let comment_suffix = " */"
  "" Detect php
  if &filetype == "php"
    let comment_prefix = "<?php /*"
    let comment_suffix = " */ ?>"
  endif
  "" Add tilte
  if getline(1) != comment_prefix && getline(2) != " *  Author: SpringHack - springhack@live.cn"
    if getline(1) != ""
      if a:new_file
        call append(0, comment_prefix)
      else
        return
      endif
    else
      call setline(1, comment_prefix)
    endif
    call append(1, " *  Author: SpringHack - springhack@live.cn")
    call append(2, " *  Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(3, " *  Filename: ".expand("%"))
    call append(4, " *  Description: Created by SpringHack using vim automatically.")
    call append(5, comment_suffix)
  endif
  call setline(3, " *  Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
  call setline(4, " *  Filename: ".expand("%"))
endfunc

func! AddTitleHTML(new_file)
  if !a:new_file
    return
  endif
  if tolower(getline(1)) != "<!doctype html>"
    call append(0, "<!doctype html>")
  endif
  if getline(2) != "<!--" && getline(3) != "  Author: SpringHack - springhack@live.cn"
    call append(1, "<!--")
    call append(2, "  Author: SpringHack - springhack@live.cn")
    call append(3, "  Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
    call append(4, "  Filename: ".expand("%"))
    call append(5, "  Description: Created by SpringHack using vim automatically.")
    call append(6, "-->")
  endif
  if getline(8) != "<html>"
    call append(7, "<html>")
    call append(8, "  <head>")
    call append(9, "    <meta http-equiv='Content-Type' content='text/html; charset=utf-8'>")
    call append(10, "    <title>SpringHack</title>")
    call append(11, "  </head>")
    call append(12, "  <body>")
    call append(13, "  </body>")
    call append(14, "</html>")
  endif
  call setline(4, "  Last modified: ".strftime("%Y-%m-%d %H:%M:%S"))
  call setline(5, "  Filename: ".expand("%"))
endfunc

func! CorrectFileTypeAction()
  "" Make filetype right
  let ext = expand('%:e')
  let ext_types = {
        \ 'm': 'objc',
        \ 'mm': 'objcpp'
        \ }
  let _ft = get(ext_types, ext, '')
  if _ft != ''
    let &filetype=_ft
  endif
endfunc

" AutoRun function
func! AutoRun(new_file)
  call CorrectFileTypeAction()
  "" AddTitle stuff
  let fline = getline(1)
  if fline[0:1] == "#!"
    return
  endif
  let setA = ["h", "c", "cpp", "objc", "objcpp", "php", "css", "java", "javascript", "typescript", "javascriptreact", "typescriptreact"]
  let setB = ["htm", "html"]
  for i in range(1, len(setA))
    if &filetype == get(setA, i - 1)
      call AddTitleClike(a:new_file)
    endif
  endfor
  for i in range(1, len(setB))
    if &filetype == get(setB, i - 1)
      call AddTitleHTML(a:new_file)
    endif
  endfor
  "" clang-format
  for i in range(1, 5)
    if &filetype == get(setA, i - 1)
      map <buffer>= :ClangFormat<cr>
    endif
  endfor
endfunc

func! CompileCode()
  w
  if &filetype == "cpp"
    call CompileGCC()
  elseif &filetype == "c"
    call CompileGPP()
  endif
endfunc

func! CompileGCC()
  !clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && gcc -Wall -ldl -lm -g % -o %<
endfunc

func! CompileGPP()
  !clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && g++ -Wall -ldl -lm -g % -o %<
endfunc

func! RunResultBinary()
  if &filetype == "c" || &filetype == "cpp"
    !clear && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<
  endif
endfunc

func! RunSourceFile()
  !clear && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && PATH=.:$PATH %
endfunc

func! RunPython()
  !clear && python3 %
endfunc

func! RunNodejs()
  !clear && node %
endfunc

func! RunPHP()
  !clear && php %
endfunc

func! BuildAll()
  w
  if &filetype == "cpp"
    exec "!clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && g++ -std=c++17 -Wall -ldl -lm -g % -o %< && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<"
  elseif &filetype == "c"
    exec "!clear && echo -e '\033[0;32;1m>>>编译结果：\033[0m' && gcc -Wall -ldl -lm -g % -o %< && echo -e '\033[0;32;1m>>>运行结果：\033[0m' && ./%<"
  elseif &filetype == "python"
    call RunPython()
  elseif &filetype == "javascript" || &filetype == "js"
    call RunNodejs()
  elseif &filetype == "php"
    call RunPHP()
  else
    call RunSourceFile()
  endif
endfunc


" Command define
"" Auto insert header
command A call BuildAll()
command S call CompileCode()
command D call RunResultBinary()
"" Get into current dir of file
command CWD lcd %:p:h
"" Git command
command! -nargs=* Glog execute 'silent !tig log <args> ' . expand('%') | redraw!
command! -nargs=* Gblame execute 'silent !tig blame <args> ' . expand('%') | redraw!
command! -nargs=* Gstatus execute 'silent !tig status <args>' | redraw!


" <leader> is \
"" About tab manage
noremap <silent><tab>t :tabnew<cr>
noremap <silent><tab>e :tabclose<cr>
noremap <silent><tab>n :tabn<cr>
noremap <silent><tab>p :tabp<cr>
noremap <silent><leader>1 :tabn 1<cr>
noremap <silent><leader>2 :tabn 2<cr>
noremap <silent><leader>3 :tabn 3<cr>
noremap <silent><leader>4 :tabn 4<cr>
noremap <silent><leader>5 :tabn 5<cr>
noremap <silent><leader>6 :tabn 6<cr>
noremap <silent><leader>7 :tabn 7<cr>
noremap <silent><leader>8 :tabn 8<cr>
noremap <silent><leader>9 :tabn 9<cr>
noremap <silent><leader>0 :tabn 10<cr>


" About search
"" In file search
vnoremap // y/<c-r>"<cr>
"" Ack search
vnoremap \\ y:Ack! <c-r>"<cr>

" About windows
"" Resize key bindings
nmap <silent> \{ :resize -4<cr>
nmap <silent> \? :resize +4<cr>
nmap <silent> \: :vertical resize -4<cr>
nmap <silent> \" :vertical resize +4<cr>

" About Coc
"" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
"" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
"" Popup menu selection
func! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfun
inoremap <silent><expr><up>    pumvisible() ? "\<C-p>" : "\<up>"
inoremap <silent><expr><down>  pumvisible() ? "\<C-n>" : "\<down>"
inoremap <silent><expr><s-tab> pumvisible() ? "\<C-p>" : "\<s-tab>"
inoremap <silent><expr><tab>   pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<tab>" : coc#refresh()
